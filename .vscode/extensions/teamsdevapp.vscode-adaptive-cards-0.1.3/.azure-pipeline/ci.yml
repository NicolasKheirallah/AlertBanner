# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - main

parameters:
  - name: RELEASE_TYPE
    displayName: "Release Type (alpha: package prerelease vsix and use test aiKey; prerelease: package prerelease vsix and use vscode aiKey; release: package release vsix and use vscode aiKey.)"
    type: string
    default: "alpha"
  - name: RELEASE_VERSION
    displayName: Release Version Number (If set to auto, use git commit id)
    type: string
    default: "auto"

pool:
  vmImage: ubuntu-latest

variables:
  - group: vscode-adaptive-card-release

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "16.x"
    displayName: "Install Node.js"

  - task: npmAuthenticate@0
    displayName: "npm Authenticate .npmrc"
    retryCountOnTaskFailure: 3
    inputs:
      workingFile: ".npmrc"

  - task: Npm@1
    displayName: "npm ci"
    inputs:
      command: "ci"

  - task: Npm@1
    displayName: "npm run build"
    inputs:
      command: "custom"
      customCommand: "run build"

  - task: Npm@1
    displayName: "npm run"
    inputs:
      command: "custom"
      customCommand: "run lint"

  - task: CmdLine@2
    displayName: "prettier check"
    inputs:
      script: "npx prettier --check src/"

  - task: ComponentGovernanceComponentDetection@0
    inputs:
      scanType: "LogOnly"
      verbosity: "Normal"
      alertWarningLevel: "High"

  - script: |
      EXTENSION_VERSION=$(node -p "require('./package.json').version")
      SHORT_SHA=$(git rev-parse --short HEAD)
      if [[ "${{ parameters.RELEASE_VERSION }}" = "auto" && "${{ parameters.RELEASE_TYPE }}" = "alpha" ]]; then
        UPDATED_EXTENSION_VERSION=$EXTENSION_VERSION-alpha.$SHORT_SHA
      else
        UPDATED_EXTENSION_VERSION=${{ parameters.RELEASE_VERSION }}
      fi
      echo "EXTENSION_VERSION=$UPDATED_EXTENSION_VERSION, UPDATED_EXTENSION_VERSION=$UPDATED_EXTENSION_VERSION"
      echo "##vso[task.setvariable variable=EXTENSION_VERSION;isOutput=true]$EXTENSION_VERSION"
      echo "##vso[task.setvariable variable=UPDATED_EXTENSION_VERSION;isOutput=true]$UPDATED_EXTENSION_VERSION"
    displayName: "Generate version string"
    name: generateVersion

  - script: |
      EXTENSION_VERSION=$(node -p "require('./package.json').version")
      if [[ "$EXTENSION_VERSION" != "$(generateVersion.UPDATED_EXTENSION_VERSION)" ]]; then
        echo "Updating package.json version..."
        npm --no-git-tag-version version $(generateVersion.UPDATED_EXTENSION_VERSION)
      else
        echo "Skipped updating package.json version"
      fi
    displayName: "Temporarily update package.json version"

  - task: Bash@3
    displayName: "Package extension"
    env:
      AI_KEY: $(VSCODE_AI_KEY)
    inputs:
      targetType: "inline"
      script: |
        set -xue
        echo "Packaging extension"
        if [[ "${{ parameters.RELEASE_TYPE }}" = "prerelease" || "${{ parameters.RELEASE_TYPE }}" = "release" ]]; then
          node .azure-pipeline/scripts/update-aikey.js package.json $AI_KEY
        fi

        if [[ "${{ parameters.RELEASE_TYPE }}" = "release" ]]; then
          npx vsce package
        else
          npx vsce package --pre-release
        fi

  - script: |
      EXTENSION_VERSION=$(node -p "require('./package.json').version")
      if [[ "$EXTENSION_VERSION" = "$UPDATED_EXTENSION_VERSION" ]]; then
        echo "Restoring original package.json version..."
        npm --no-git-tag-version version $(generateVersion.EXTENSION_VERSION)
      else
        echo "Skipped restoring package.json version"
      fi
    displayName: "Restore package.json version"

  - task: ArchiveFiles@2
    displayName: "Package card samples"
    inputs:
      rootFolderOrFile: "samples"
      includeRootFolder: false
      archiveType: "zip"
      archiveFile: "$(Build.ArtifactStagingDirectory)/samples-$(generateVersion.UPDATED_EXTENSION_VERSION).zip"
      replaceExistingArchive: true

  - task: CopyFiles@2
    displayName: "Copy vsix to staging directory"
    inputs:
      Contents: "**/*.vsix"
      TargetFolder: "$(Build.ArtifactStagingDirectory)"

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "Drop"
